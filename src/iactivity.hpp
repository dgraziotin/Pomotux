#ifndef _IACTIVITY_HPP_
#define _IACTIVITY_HPP_
#include "litesql.hpp"
#include "pomotuxdatabase.hpp"
#include <iostream>
#include <string>

//using namespace std;
using namespace litesql;
using namespace pomotuxdatabase;

/**  Interface Class to Activity
 *
 * #include "litesql.hpp"
 * #include "pomotuxdatabase.hpp"
 * -llitesql 
 *
 * Interface class to the one automatically generated by LiteSQL.
 *  
 * @see pomotuxdatabase.hpp
 */

class IActivity : public Activity {
public:

    /** Default constructor.
     *
     * @param a reference to the litesql database
     */
    IActivity(const litesql::Database& db);

    /** For the creation of an Activity with the inizialization of its attributes.
     *
     * @param db a reference to the litesql database.
     * @param description a string for the activity description
     * @param insertionDate an integer representing the time in seconds from 1st Jan 1970 to the current time
     * @param deadlineDate an integer the deadline of the activity
     */
    IActivity(const litesql::Database& db, string description, int insertionDate, int deadlineDate);

    /** Sets the description of an activity
     *
     * @param description a string for the activity description
     */
    void set_mDescription(string description);

    /** Sets the value of the date of insertion of an activity. The date is expressed as seconds elapsed from 1st Jan 1970 till the current time
     *
     * @param insertionDate an integer representing the date of insertion in seconds
     */
    void set_mInsertionDate(int date);

    /** Sets the deadline of an Activity. The date is expressed as seconds elapsed from 1st Jan 1970 till deadline date
     *
     * @param deadlineDate an integer the deadline of the activity
     */
    void set_mDeadline(int date);

    /** Modifies the number of pomodoro dedicated to an activity
     *
     * @param numPomodoro an integer representing the number of pomodoro dedicated to an activity
     */
    void set_mNumPomodoro(int numPomodoro);

    /** Sets the status of an Activity.
     *
     * @param isFinished a boolean value representing the activity status
     */
    void set_mIsFinished(bool isFinished);

    /** Returns the description of an activity as c++ string.
     *
     * @return a string representing the description of the activity
     */
    string get_mDescription();

    /** Returns the insertion date of an activity as litesql date field
     *
     * @return an object of type litesql::Date representing the insertion date
     */
    litesql::Field<litesql::Date> get_mInsertionDate();


    /** Returns the deadline of an activity as litesql date field
     *
     * @return an object of type litesql::Date representing the Deadline date
     */
    litesql::Field<litesql::Date> get_mDeadline();

    /** Returns the number of pomodoro dedicated to an activity
     *
     * @return an integer representing the numeber of pomodoro dedicated to the activity
     */
    int get_mNumPomodoro();

    /** Returns the status of an activity
     *
     * @return a boolean value representing the activity status (finised or not)
     */
    bool get_mIsFinished();

    /** Destructor.
     *
     */
    ~IActivity();
};
#endif
