#ifndef _IACTIVITY_HPP_
#define _IACTIVITY_HPP_
#include "litesql.hpp"
#include "pomotuxdatabase.hpp"
#include <iostream>
#include <string>

//using namespace std;
using namespace litesql;
using namespace pomotuxdatabase;

/**  Interface Class to Activity
 *
 * #include "litesql.hpp"
 * #include "pomotuxdatabase.hpp"
 * -llitesql 
 *
 * Interface class to the obejct table Activity automatically generated by 
 * litesql framework
 *  
 * @see pomotuxdatabase.hpp
 */
class IActivity : public Activity
{
	public:
	
   /** Default constructor.
    * 
    * @param a reference to the litesql database
    */
	IActivity(const litesql::Database& db);
	
   /** Copy constructor.
	* 
	* @param db a reference to the litesql database.
	* @param description a string for the activity description
	* @param insertionDate an integer representing the time in seconds from 1st Jan 1970 to the current time
	* @param deadlineDate an integer the deadline of the activity 
	*/
	IActivity(const litesql::Database& db,string description,int insertionDate,int deadlineDate);
	
   /** A method to set the description of an activity
    * 
    * @param description a string for the activity description
    */
	void set_mDescription (string description);
	
   /** A method to set the value of the date of insertion of an activity. The date is expressed as seconds elapsed from 1st Jan 1970 till the current time
    * 
    * @param insertionDate an integer representing the date of insertion in seconds 
    */
	void set_mInsertionDate (int date);
	
   /** A method to set the value of the dealine date. The date is expressed as seconds elapsed from 1st Jan 1970 till deadline date
    * 
    * @param deadlineDate an integer the deadline of the activity 
    */
	void set_mDeadline (int date);
	
   /** A method to modify the number of pomodoro dedicated to an activity
    * 
    * @param numPomodoro an integer representing the number of pomodoro dedicated to an activity
    */
	void set_mNumPomodoro (int numPomodoro);
	
   /** A method to set the status of an activity in terms of finished or not finished. (i.e true will be returned only if the activity is finished,otherwise will be returned false)
    * 
    * @param isFinished a boolean value representing the activity status
    */
	void set_mIsFinished (bool isFinished);

   /** A method that returns the description of an activity in the c++ string format
    * 
    * @return a string representing the description of the activity
    */
	string get_mDescription();
	
   /** A method that returns the insertion date of an activity in the litesql date format 
    * 
    * @return an object of type litesql::Date representing the insertion date
    */
	litesql::Field<litesql::Date> get_mInsertionDate();
	
   /** A method that returns the deadline of an activity in the litesql date format 
    * 
    * @return an object of type litesql::Date representing the Deadline date
    */
	litesql::Field<litesql::Date> get_mDeadline();

   /** A method that returns the number of pomodoro dedicated to an activity
    * 
    * @return an integer representing the numeber of pomodoro dedicated to the activity
    */
	int get_mNumPomodoro();
	
   /** A method that returns the status of an activity in terms of finished or not finished. (i.e true will be returned only if the activity is finished,otherwise will be returned false)
    * 
    * @return a boolean value representing the activity status
    */
	bool get_mIsFinished();
	
   /** Deconstructor.
    * 
    */
	~IActivity();
};
#endif
